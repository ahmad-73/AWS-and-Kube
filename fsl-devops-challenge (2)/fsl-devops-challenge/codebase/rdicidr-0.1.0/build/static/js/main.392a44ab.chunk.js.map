{"version":3,"sources":["Octet.js","Netmask.js","SubnetNumbersInput.js","lib/ipv4.js","IPv4Addr.js","App.js","reportWebVitals.js","index.js"],"names":["Octet","props","message","setMessage","useState","isValid","setIsValid","value","classes","concat","_jsxs","className","children","_jsx","type","onChange","e","change","target","setValid","isNaN","changeFunction","index","Netmask","SubnetNumbersInput","maxNumberOfSubnets","IPv4","constructor","address","mask","this","parseInt","fullAddress","reserved","setReserved","setSubnetMask","setOctet","octet","getBinnary","map","toString","padStart","join","getOnlyBinnary","getFullAddress","replace","networkAddress","match","firstUsableAddress","arguments","length","undefined","lastUsableAddress","broadcastAddress","netmask","count","availableCount","getClosestPowerOfTwo","number","strNumber","len","substring","breakIntoSubnets","numberOfPossibleSubnets","subnets","additionalMask","repeat","newNetmask","maxNetmask","currentSubnet","currentOctets","currIpv4","push","IPv4Addr","ipv4","setIpv4","validAddress","setValidAddress","showSubnetting","setShowSubnetting","subnetsNumber","setSubnetsNumber","updatedAddress","setNetmask","name","checked","id","setNumberOfSubnets","netmasks","netmasksElements","forEach","displayNetmasks","App","href","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"mRAsCeA,MAnCDC,IACZ,MAAOC,EAASC,GAAcC,mBAAS,KAChCC,EAASC,GAAcF,mBAASH,EAAMM,MAAQ,KAG/CC,EAAO,SAAAC,OADMJ,EAAU,QAAU,WAGvC,OACEK,eAAA,OAAKC,UAAWH,EAAQI,SAAA,CACtBC,cAAA,SACEC,KAAK,OACLP,MAAON,EAAMM,MACbQ,SAAUC,IACR,IAAIC,GAAS,EACTD,EAAEE,OAAOX,MAAQ,GAAKS,EAAEE,OAAOX,MAAQ,KACzCU,GAAS,EACTX,GAAW,GACXL,EAAMkB,UAAS,GACfhB,EAAW,oBACiB,KAAnBa,EAAEE,OAAOX,OAAgBa,MAAMJ,EAAEE,OAAOX,OACjDU,GAAS,GAGTA,GAAS,EACTX,GAAW,GACXL,EAAMkB,UAAS,IAEjBlB,EAAMoB,eAAeL,EAAEE,OAAOX,MAAON,EAAMqB,MAAOL,MAGtDJ,cAAA,OAAKF,UAAU,gBAAeC,SAAEV,Q,MCKvBqB,MAnCCtB,IACd,MAAOC,EAASC,GAAcC,mBAAS,KAChCC,EAASC,GAAcF,oBAAS,GAGjCI,EAAO,WAAAC,OADMJ,EAAU,QAAU,WAGvC,OACEK,eAAA,OAAKC,UAAWH,EAAQI,SAAA,CACtBC,cAAA,SACEC,KAAK,OACLP,MAAON,EAAMM,MACbQ,SAAUC,IACR,IAAIC,GAAS,EACTD,EAAEE,OAAOX,MAAQ,GAAKS,EAAEE,OAAOX,MAAQ,IACzCU,GAAS,EACTX,GAAW,GACXL,EAAMkB,UAAS,GACfhB,EAAW,oBACiB,KAAnBa,EAAEE,OAAOX,OAAgBa,MAAMJ,EAAEE,OAAOX,OACjDU,GAAS,GAGTA,GAAS,EACTX,GAAW,GACXL,EAAMkB,UAAS,IAEjBlB,EAAMoB,eAAeL,EAAEE,OAAOX,MAAOU,MAGzCJ,cAAA,OAAKF,UAAU,gBAAeC,SAAEV,Q,MCQvBsB,MAtCYvB,IACzB,MAAOC,EAASC,GAAcC,mBAAS,KAChCC,EAASC,GAAcF,mBAC5BH,EAAMM,MAAQN,EAAMwB,oBAIhBjB,EAAO,kBAAAC,OADMJ,EAAU,QAAU,WAGvC,OACEK,eAAA,OAAKC,UAAWH,EAAQI,SAAA,CAAC,qBAEvBC,cAAA,SACEC,KAAK,OACLP,MAAON,EAAMM,MACbQ,SAAUC,IACR,IAAIC,GAAS,EACTD,EAAEE,OAAOX,MAAQ,GAAKS,EAAEE,OAAOX,MAAQN,EAAMwB,oBAC/CR,GAAS,EACTX,GAAW,GACXH,EAAW,gCACiB,KAAnBa,EAAEE,OAAOX,MAClBU,GAAS,EACAG,MAAMJ,EAAEE,OAAOX,OACxBU,GAAS,GAGTA,GAAS,EACTX,GAAW,IAEbL,EAAMc,SAASC,EAAEE,OAAOX,MAAOU,MAGnCJ,cAAA,OAAKF,UAAU,gBAAeC,SAAEV,QCpCtC,MAAMwB,EACJC,YAAYC,EAASC,GACnBC,KAAKF,QAAUA,EACfE,KAAKD,KAAOE,SAASF,GACrBC,KAAKE,YAAc,GACnBF,KAAKG,SAAW,EAGlBC,YAAYD,GACVH,KAAKG,SAAWA,EAGlBE,cAAcN,GACZC,KAAKD,KAAOA,EACZC,KAAKE,YAAc,GAGrBI,SAASC,EAAOf,GACdQ,KAAKF,QAAQN,GAASe,EACtBP,KAAKE,YAAc,GAGrBM,aACE,OAAOR,KAAKF,QACTW,KAAI,CAACF,EAAOf,IACJe,EAAMG,SAAS,GAAGC,SAAS,EAAG,OAEtCC,KAAK,KAGVC,iBACE,OAAOb,KAAKF,QACTW,KAAI,CAACF,EAAOf,IACJe,EAAMG,SAAS,GAAGC,SAAS,EAAG,OAEtCC,KAAK,IAGVE,iBACE,MAAyB,KAArBd,KAAKE,cAGTF,KAAKE,YAAcD,SACjBD,KAAKQ,aAAaO,QAAQ,MAAO,IAAIJ,SAAS,GAAI,KAClD,IAJOX,KAAKE,YAShBc,iBAcE,QAboBhB,KAAKc,iBACTb,UACZ,GAAM,GAAKD,KAAKD,OAAW,GAAGW,SAAS,GAAGC,SAAS,GAAI,KACzD,MAEkD,GACjDD,SAAS,GACTC,SAAS,GAAI,KACbM,MAAM,WAEgCR,KAAIF,GACpCN,SAASM,EAAO,KAEAK,KAAK,KAGhCM,qBAAkC,IAAff,EAAQgB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAc5B,OARiD,GAL7BnB,KAAKc,iBACTb,UACZ,GAAM,GAAKD,KAAKD,OAAW,GAAGW,SAAS,GAAGC,SAAS,GAAI,KACzD,IAEmDR,IAAc,GAChEO,SAAS,GACTC,SAAS,GAAI,KACbM,MAAM,WAE4BR,KAAIF,GAChCN,SAASM,EAAO,KAEFK,KAAK,KAG9BU,oBAeE,SAdoBtB,KAAKc,mBACTb,UACb,GAAM,GAAKD,KAAKD,MAAOW,SAAS,GAAGC,SAAS,GAAI,KACjD,KAE8B,MACoB,GAAK,GACtDD,SAAS,GACTC,SAAS,GAAI,KACbM,MAAM,WAE0BR,KAAIF,GAC9BN,SAASM,EAAO,KAEHK,KAAK,KAG7BW,mBAeE,QAdoBvB,KAAKc,mBACTb,UACb,GAAM,GAAKD,KAAKD,MAAOW,SAAS,GAAGC,SAAS,GAAI,KACjD,KAE8B,MACwB,GACrDD,SAAS,GACTC,SAAS,GAAI,KACbM,MAAM,WAEoCR,KAAIF,GACxCN,SAASM,EAAO,KAEEK,KAAK,KAGlCY,UAaE,OAZgBvB,UACb,GAAM,GAAKD,KAAKD,MAAOW,SAAS,GAAGC,SAAS,GAAI,KACjD,GAGCD,SAAS,GACTC,SAAS,GAAI,KACbM,MAAM,WAEwBR,KAAIF,GAC5BN,SAASM,EAAO,KAEPK,KAAK,KAGzBa,QAEE,OADcxB,UAAU,GAAM,GAAKD,KAAKD,MAAOW,SAAS,GAAI,GAI9DgB,iBAA0C,IAA3BvB,EAAQgB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGnB,KAAKG,SAC7B,OAAOH,KAAKyB,QAAUtB,EAGxBwB,qBAAqBC,GACnB,MAAMC,IAAcD,GAAQlB,SAAS,GAC/BoB,EAAMD,EAAUT,OAEtB,OADgBnB,SAAS4B,EAAUE,UAAU,GAAI,KAAO,EAC1C,EACJ,GAAKD,IAAS,EAEjBF,EAGTI,iBAAiBJ,GACf,GAAI5B,KAAKiC,wBAA0BL,GAAUA,GAAU,EACrD,MAAO,CAAC,oBAADjD,OAAqBiD,EAAM,aAEpC,MAAMM,EAAU,GAEVJ,MADiB9B,KAAK2B,qBAAqBC,IACpBlB,SAAS,GAAGU,OAAS,EAC5Ce,EACHlC,SAAS,IAAImC,OAAON,GAAM,IAAO,GAAK9B,KAAKD,KAAO+B,IAAU,EACzDN,EAAUvB,UACb,GAAM,GAAKD,KAAKD,MAAOW,SAAS,GAAGC,SAAS,GAAI,KACjD,GAEI0B,EAAarC,KAAKD,KAAO+B,EACzBQ,GAAcd,EAAUW,KAAoB,EAClD,IAAII,EAAgBf,EAChBgB,EAAgBxC,KAAKF,QACzB,KAAOyC,GAAiBD,GAAY,CAClC,MAAMG,EAAW,IAAI7C,EAAK4C,EAAeH,GACzCH,EAAQQ,KAAK,CACX1B,eAAgByB,EAASzB,iBACzBQ,QAASa,EACTZ,MAAOgB,EAAShB,UAElBc,GAAiBE,EAAShB,QAO1Be,GALEvC,SAASwC,EAAS5B,iBAAkB,GAAK4B,EAAShB,SAEjDf,SAAS,GACTC,SAAS,GAAI,KACbM,MAAM,WACwBR,KAAIF,GAC5BN,SAASM,EAAO,KAG3B,OAAO2B,EAGTD,0BACE,OAAO,IAAM,GAAKjC,KAAKD,O,MCvCZ4C,MAnJExE,IACf,MAAOyE,EAAMC,GAAWvE,mBAAS,IAAIsB,EAAK,CAAC,GAAI,EAAG,EAAG,GAAI,MAClDkD,EAAcC,GAAmBzE,oBAAS,IAC1C0E,EAAgBC,GAAqB3E,oBAAS,IAC9C4E,EAAeC,GAAoB7E,mBAAS,GAE7CgC,EAAWA,CAACC,EAAOf,EAAOL,KAC9B,MAAMiE,EAAiB,IAAIR,EAAK9C,SAC5BX,IACFiE,EAAe5D,IAAUe,EACzBsC,EAAQ,IAAIjD,EAAKwD,EAAgBR,EAAK7C,SA4B1C,OACEnB,eAAA,OAAAE,SAAA,CACEF,eAAA,OAAKC,UAAU,oBAAmBC,SAAA,CAC/B8D,EAAK9C,QAAQW,KAAI,CAACF,EAAOf,IAEtBZ,eAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAC9BC,cAACb,EAAK,CACJO,MAAO8B,EACPf,MAAOA,EACPH,SAAU0D,EACVxD,eAAgBe,IAEjBd,EAAQ,EAAIT,cAAA,QAAAD,SAAM,MAAWC,cAAA,QAAMF,UAAU,QAAOC,SAAC,QAAQ,iBAAAH,OAPTa,MAUvD,IACJT,cAACU,EAAO,CACNhB,MAAOmE,EAAK7C,KACZV,SAAU0D,EACVxD,eA3CW8D,CAAC7B,EAASrC,KACvBA,GACF0D,EAAQ,IAAIjD,EAAKgD,EAAK9C,QAAS0B,UA6C9BsB,EACClE,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBF,eAAA,OAAAE,SAAA,CACEC,cAAA,UAAAD,SAAQ,YACRC,cAAA,QAAAD,SAAO8D,EAAKpC,kBAEd5B,eAAA,OAAAE,SAAA,CACEC,cAAA,UAAAD,SAAQ,qBACRC,cAAA,QAAAD,SAAO8D,EAAK5B,sBAEdpC,eAAA,OAAAE,SAAA,CACEC,cAAA,UAAAD,SAAQ,0BACRC,cAAA,QAAAD,SAAO8D,EAAK1B,0BAEdtC,eAAA,OAAAE,SAAA,CACEC,cAAA,UAAAD,SAAQ,+BACRC,cAAA,QAAAD,SAAO8D,EAAK1B,mBAAmB,KAC/BnC,cAAA,SACAA,cAAA,QAAAD,SAAM,+EAKRF,eAAA,OAAAE,SAAA,CACEC,cAAA,UAAAD,SAAQ,yBACRC,cAAA,QAAAD,SAAO8D,EAAKtB,yBAEd1C,eAAA,OAAAE,SAAA,CACEC,cAAA,UAAAD,SAAQ,uBACRC,cAAA,QAAAD,SAAO8D,EAAKrB,wBAEd3C,eAAA,OAAAE,SAAA,CACEC,cAAA,UAAAD,SAAQ,aACRC,cAAA,QAAAD,SAAO8D,EAAKpB,eAEd5C,eAAA,OAAAE,SAAA,CACEC,cAAA,UAAAD,SAAQ,WACRC,cAAA,QAAAD,SAAO8D,EAAKnB,aAEd7C,eAAA,OAAAE,SAAA,CACEC,cAAA,UAAAD,SAAQ,sBACRC,cAAA,QAAAD,SAAO8D,EAAKlB,sBAEd9C,eAAA,OAAAE,SAAA,CACEC,cAAA,UAAAD,SAAQ,2BACRC,cAAA,QAAAD,SAAO8D,EAAKlB,eAAe,WAI/B,GAGF9C,eAAA,OAAKC,UAAU,UAASC,SAAA,CAAC,sBAEvBC,cAAA,SACEuE,KAAK,iBACLtE,KAAK,WACLuE,QAASP,EACT/D,SAAUC,IACR+D,EAAkB/D,EAAEE,OAAOmE,YAG/BxE,cAAA,SACAA,cAAA,SACCiE,EACCpE,eAAA,OAAK4E,GAAG,UAAS1E,SAAA,CAAC,0BACQ8D,EAAKX,0BAA0B,4FAElCW,EAAKjB,qBAAqBuB,GAC/CtE,eAAA,OAAK4E,GAAG,yBAAwB1E,SAAA,CAC9BC,cAACW,EAAkB,CACjBjB,MAAOyE,EACPjE,SAjHawE,CAACP,EAAe/D,KACrCA,GACFgE,EAAiBD,IAgHPvD,mBAAoBiD,EAAKX,4BA5GfyB,KACtB,MAAMC,EAAmB,GAQzB,OAPAD,EAASE,SAAQ,CAAC1E,EAAGM,KACnBmE,EAAiBjB,KACf9D,eAAA,OAAAE,SAAA,CACGI,EAAE8B,eAAe,IAAE9B,EAAEsC,QAAQ,KAAGtC,EAAEuC,MAAM,YAC3C,kBAAA9C,OAF4Ba,QAKzBmE,GAqGIE,CAAgBjB,EAAKZ,iBAAiBkB,UAI3C,U,MChIKY,MAhBf,WACE,OACElF,eAAA,OAAKC,UAAU,MAAKC,SAAA,CAClBC,cAAA,UAAQF,UAAU,aAAYC,SAC5BC,cAAA,OAAAD,SAAK,sBAEPC,cAAC4D,EAAQ,IACT/D,eAAA,UAAAE,SAAA,CACEC,cAAA,SAAM,iEACyD,IAC/DA,cAAA,KAAGgF,KAAK,qBAAoBjF,SAAC,sBCDtBkF,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,OCDdS,IAASC,OACP5F,cAAC6F,IAAMC,WAAU,CAAA/F,SACfC,cAAC+E,EAAG,MAENgB,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.392a44ab.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Octet.css';\n\nconst Octet = props => {\n  const [message, setMessage] = useState('');\n  const [isValid, setIsValid] = useState(props.value < 255);\n\n  const validClass = isValid ? 'valid' : 'invalid';\n  const classes = `octet ${validClass}`;\n\n  return (\n    <div className={classes}>\n      <input\n        type=\"text\"\n        value={props.value}\n        onChange={e => {\n          let change = false;\n          if (e.target.value < 0 || e.target.value > 255) {\n            change = true;\n            setIsValid(false);\n            props.setValid(false);\n            setMessage('incorrect value');\n          } else if (e.target.value === '' || isNaN(e.target.value)) {\n            change = false;\n            //stay the same\n          } else {\n            change = true;\n            setIsValid(true);\n            props.setValid(true);\n          }\n          props.changeFunction(e.target.value, props.index, change);\n        }}\n      />\n      <div className=\"error-message\">{message}</div>\n    </div>\n  );\n};\n\nexport default Octet;\n","import React, { useState } from 'react';\nimport './Netmask.css';\n\nconst Netmask = props => {\n  const [message, setMessage] = useState('');\n  const [isValid, setIsValid] = useState(true);\n\n  const validClass = isValid ? 'valid' : 'invalid';\n  const classes = `netmask ${validClass}`;\n\n  return (\n    <div className={classes}>\n      <input\n        type=\"text\"\n        value={props.value}\n        onChange={e => {\n          let change = false;\n          if (e.target.value < 0 || e.target.value > 32) {\n            change = true;\n            setIsValid(false);\n            props.setValid(false);\n            setMessage('incorrect value');\n          } else if (e.target.value === '' || isNaN(e.target.value)) {\n            change = false;\n            //stay the same\n          } else {\n            change = true;\n            setIsValid(true);\n            props.setValid(true);\n          }\n          props.changeFunction(e.target.value, change);\n        }}\n      />\n      <div className=\"error-message\">{message}</div>\n    </div>\n  );\n};\n\nexport default Netmask;\n","import React, { useState } from 'react';\nimport './SubnetNumbersInput.css';\n\nconst SubnetNumbersInput = props => {\n  const [message, setMessage] = useState('');\n  const [isValid, setIsValid] = useState(\n    props.value < props.maxNumberOfSubnets\n  );\n\n  const validClass = isValid ? 'valid' : 'invalid';\n  const classes = `subnet-numbers ${validClass}`;\n\n  return (\n    <div className={classes}>\n      Number of subnets:\n      <input\n        type=\"text\"\n        value={props.value}\n        onChange={e => {\n          let change = false;\n          if (e.target.value < 0 || e.target.value > props.maxNumberOfSubnets) {\n            change = true;\n            setIsValid(false);\n            setMessage('incorrect number of subnets');\n          } else if (e.target.value === '') {\n            change = true;\n          } else if (isNaN(e.target.value)) {\n            change = false;\n            //stay the same\n          } else {\n            change = true;\n            setIsValid(true);\n          }\n          props.onChange(e.target.value, change);\n        }}\n      />\n      <div className=\"error-message\">{message}</div>\n    </div>\n  );\n};\n\nexport default SubnetNumbersInput;\n","class IPv4 {\n  constructor(address, mask) {\n    this.address = address;\n    this.mask = parseInt(mask);\n    this.fullAddress = '';\n    this.reserved = 2;\n  }\n\n  setReserved(reserved) {\n    this.reserved = reserved;\n  }\n\n  setSubnetMask(mask) {\n    this.mask = mask;\n    this.fullAddress = '';\n  }\n\n  setOctet(octet, index) {\n    this.address[index] = octet;\n    this.fullAddress = '';\n  }\n\n  getBinnary() {\n    return this.address\n      .map((octet, index) => {\n        return octet.toString(2).padStart(8, '0');\n      })\n      .join('.');\n  }\n\n  getOnlyBinnary() {\n    return this.address\n      .map((octet, index) => {\n        return octet.toString(2).padStart(8, '0');\n      })\n      .join('');\n  }\n\n  getFullAddress() {\n    if (this.fullAddress !== '') {\n      return this.fullAddress;\n    }\n    this.fullAddress = parseInt(\n      this.getBinnary().replace(/\\./g, '').padStart(32, '0'),\n      2\n    );\n    return this.fullAddress;\n  }\n\n  networkAddress() {\n    const fullAddress = this.getFullAddress();\n    const netmask = parseInt(\n      ((1 << (32 - this.mask)) >>> 0).toString(2).padStart(32, '1'),\n      2\n    );\n    const networkAddress = ((fullAddress & netmask) >>> 0)\n      .toString(2)\n      .padStart(32, '0')\n      .match(/.{1,8}/g);\n\n    const intNetWorkAddress = networkAddress.map(octet => {\n      return parseInt(octet, 2);\n    });\n    return intNetWorkAddress.join('.');\n  }\n\n  firstUsableAddress(reserved = 0) {\n    const fullAddress = this.getFullAddress();\n    const netmask = parseInt(\n      ((1 << (32 - this.mask)) >>> 0).toString(2).padStart(32, '1'),\n      2\n    );\n    const firstAddress = (((fullAddress & netmask) + 1 + reserved) >>> 0)\n      .toString(2)\n      .padStart(32, '0')\n      .match(/.{1,8}/g);\n\n    const intFirstAddress = firstAddress.map(octet => {\n      return parseInt(octet, 2);\n    });\n    return intFirstAddress.join('.');\n  }\n\n  lastUsableAddress() {\n    const fullAddress = this.getFullAddress();\n    const netmask = parseInt(\n      (1 << (32 - this.mask)).toString(2).padStart(32, '1'),\n      2\n    );\n    const broadcast = ~(netmask >>> 0);\n    const lastAddress = (((fullAddress | broadcast) >>> 0) - 1)\n      .toString(2)\n      .padStart(32, '0')\n      .match(/.{1,8}/g);\n\n    const intLastAddress = lastAddress.map(octet => {\n      return parseInt(octet, 2);\n    });\n    return intLastAddress.join('.');\n  }\n\n  broadcastAddress() {\n    const fullAddress = this.getFullAddress();\n    const netmask = parseInt(\n      (1 << (32 - this.mask)).toString(2).padStart(32, '1'),\n      2\n    );\n    const broadcast = ~(netmask >>> 0);\n    const broadcastAddress = ((fullAddress | broadcast) >>> 0)\n      .toString(2)\n      .padStart(32, '0')\n      .match(/.{1,8}/g);\n\n    const intBroadcastAddress = broadcastAddress.map(octet => {\n      return parseInt(octet, 2);\n    });\n    return intBroadcastAddress.join('.');\n  }\n\n  netmask() {\n    const netmask = parseInt(\n      (1 << (32 - this.mask)).toString(2).padStart(32, '1'),\n      2\n    );\n    const netmaskOctets = netmask\n      .toString(2)\n      .padStart(32, '0')\n      .match(/.{1,8}/g);\n\n    const intNetmask = netmaskOctets.map(octet => {\n      return parseInt(octet, 2);\n    });\n    return intNetmask.join('.');\n  }\n\n  count() {\n    const count = parseInt((1 << (32 - this.mask)).toString(2), 2);\n    return count;\n  }\n\n  availableCount(reserved = this.reserved) {\n    return this.count() - reserved;\n  }\n\n  getClosestPowerOfTwo(number) {\n    const strNumber = (+number).toString(2);\n    const len = strNumber.length;\n    const masking = parseInt(strNumber.substring(1), 2) >>> 0;\n    if (masking > 0) {\n      return (1 << len) >>> 0;\n    }\n    return number;\n  }\n\n  breakIntoSubnets(number) {\n    if (this.numberOfPossibleSubnets < number || number <= 0) {\n      return [`Can't break into ${number} subnets`];\n    }\n    const subnets = [];\n    const closestNumber = +this.getClosestPowerOfTwo(number); //e.g. 8 - 1000\n    const len = (+closestNumber).toString(2).length - 1; // to get the max number of elements for the next power of two.\n    const additionalMask =\n      (parseInt('1'.repeat(len), 2) << (32 - this.mask - len)) >>> 0; // e.g. 111 if we have number be 8\n    const netmask = parseInt(\n      (1 << (32 - this.mask)).toString(2).padStart(32, '1'),\n      2\n    ); // the current netmask in binary\n    const newNetmask = this.mask + len;\n    const maxNetmask = (netmask | additionalMask) >>> 0;\n    let currentSubnet = netmask;\n    let currentOctets = this.address;\n    while (currentSubnet <= maxNetmask) {\n      const currIpv4 = new IPv4(currentOctets, newNetmask);\n      subnets.push({\n        networkAddress: currIpv4.networkAddress(),\n        netmask: newNetmask,\n        count: currIpv4.count(),\n      });\n      currentSubnet += currIpv4.count();\n      const nextSubnet =\n        parseInt(currIpv4.getOnlyBinnary(), 2) + currIpv4.count();\n      const strCurrentOctets = nextSubnet\n        .toString(2)\n        .padStart(32, '0')\n        .match(/.{1,8}/g);\n      currentOctets = strCurrentOctets.map(octet => {\n        return parseInt(octet, 2);\n      });\n    }\n    return subnets;\n  }\n\n  numberOfPossibleSubnets() {\n    return 2 ** (30 - this.mask);\n  }\n}\n\nexport { IPv4 };\n","import Octet from './Octet';\nimport Netmask from './Netmask';\nimport SubnetNumbersInput from './SubnetNumbersInput';\nimport React, { useState } from 'react';\nimport { IPv4 } from './lib/ipv4';\nimport './IPv4Addr.css';\n\nconst IPv4Addr = props => {\n  const [ipv4, setIpv4] = useState(new IPv4([10, 0, 8, 0], 21));\n  const [validAddress, setValidAddress] = useState(true);\n  const [showSubnetting, setShowSubnetting] = useState(true);\n  const [subnetsNumber, setSubnetsNumber] = useState(0);\n\n  const setOctet = (octet, index, change) => {\n    const updatedAddress = [...ipv4.address];\n    if (change) {\n      updatedAddress[index] = +octet;\n      setIpv4(new IPv4(updatedAddress, ipv4.mask));\n    }\n  };\n\n  const setNetmask = (netmask, change) => {\n    if (change) {\n      setIpv4(new IPv4(ipv4.address, netmask));\n    }\n  };\n\n  const setNumberOfSubnets = (subnetsNumber, change) => {\n    if (change) {\n      setSubnetsNumber(subnetsNumber);\n    }\n  };\n\n  const displayNetmasks = netmasks => {\n    const netmasksElements = [];\n    netmasks.forEach((e, index) => {\n      netmasksElements.push(\n        <div key={`networkAddress-${index}`}>\n          {e.networkAddress}/{e.netmask} ({e.count} hosts)\n        </div>\n      );\n    });\n    return netmasksElements;\n  };\n\n  return (\n    <div>\n      <div className=\"address-container\">\n        {ipv4.address.map((octet, index) => {\n          return (\n            <div className=\"octet-container\" key={`oct-container-${index}`}>\n              <Octet\n                value={octet}\n                index={index}\n                setValid={setValidAddress}\n                changeFunction={setOctet}\n              />\n              {index < 3 ? <span>.</span> : <span className=\"slash\">/</span>}\n            </div>\n          );\n        })}{' '}\n        <Netmask\n          value={ipv4.mask}\n          setValid={setValidAddress}\n          changeFunction={setNetmask}\n        />\n      </div>\n\n      {validAddress ? (\n        <div className=\"results\">\n          <div>\n            <strong>Binary:</strong>\n            <span>{ipv4.getBinnary()}</span>\n          </div>\n          <div>\n            <strong>Network Address:</strong>\n            <span>{ipv4.networkAddress()}</span>\n          </div>\n          <div>\n            <strong>First usable address:</strong>\n            <span>{ipv4.firstUsableAddress()}</span>\n          </div>\n          <div>\n            <strong>First usable address(AWS):</strong>\n            <span>{ipv4.firstUsableAddress(3)}</span>\n            <br />\n            <span>\n              AWS reserves first four addresses for: Network, Router, DNS,\n              Future use\n            </span>\n          </div>\n          <div>\n            <strong>Last usable address:</strong>\n            <span>{ipv4.lastUsableAddress()}</span>\n          </div>\n          <div>\n            <strong>Broadcast Address:</strong>\n            <span>{ipv4.broadcastAddress()}</span>\n          </div>\n          <div>\n            <strong>Netmask:</strong>\n            <span>{ipv4.netmask()}</span>\n          </div>\n          <div>\n            <strong>Count:</strong>\n            <span>{ipv4.count()}</span>\n          </div>\n          <div>\n            <strong>Usable addresses:</strong>\n            <span>{ipv4.availableCount()}</span>\n          </div>\n          <div>\n            <strong>Usable addresses(AWS):</strong>\n            <span>{ipv4.availableCount(5)}</span>\n          </div>\n        </div>\n      ) : (\n        ''\n      )}\n\n      <div className=\"subnets\">\n        Break into subnets:\n        <input\n          name=\"showSubnetting\"\n          type=\"checkbox\"\n          checked={showSubnetting}\n          onChange={e => {\n            setShowSubnetting(e.target.checked);\n          }}\n        />\n        <br />\n        <br />\n        {showSubnetting ? (\n          <div id=\"details\">\n            max number of subnets: {ipv4.numberOfPossibleSubnets()} with a\n            minimum of 4 addreses (minus Network, broadcast, 2 available\n            addresses) closest: {ipv4.getClosestPowerOfTwo(subnetsNumber)}\n            <div id=\"subnet-input-container\">\n              <SubnetNumbersInput\n                value={subnetsNumber}\n                onChange={setNumberOfSubnets}\n                maxNumberOfSubnets={ipv4.numberOfPossibleSubnets()}\n              />\n              {displayNetmasks(ipv4.breakIntoSubnets(subnetsNumber))}\n            </div>\n          </div>\n        ) : (\n          ''\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default IPv4Addr;\n","import IPv4Addr from './IPv4Addr';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>CIDR Calculator</div>\n      </header>\n      <IPv4Addr />\n      <footer>\n        <hr />\n        If you find this tool useful, you might enjoy reading my blog:{' '}\n        <a href=\"https://rderik.com\">rderik.com</a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}